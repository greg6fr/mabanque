pipeline {
    agent any

    environment {
        GIT_REPO = "https://github.com/greg6fr/mabanque.git"
        DOCKER_IMAGE = "96622564/mabanque"
        DOCKER_TAG = "latest"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"
    }

    stages {

        stage('Cloner le d√©p√¥t') {
            steps {
                echo "üì• Clonage du d√©p√¥t GitHub"
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('V√©rification des versions') {
            steps {
                echo "üß™ V√©rification des versions de Node.js et npm"
                sh '''
                    node -v
                    npm -v
                '''
            }
        }

        stage('Installation des d√©pendances Angular') {
            steps {
                echo 'üì¶ Installation des d√©pendances'
                sh 'npm install'
            }
        }

        stage('Ex√©cuter les tests') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires Angular'
                sh './node_modules/.bin/ng test --watch=false --browsers=ChromeHeadless'
            }
        }

        stage('Construire l\'application') {
            steps {
                echo 'üèóÔ∏è Construction de l\'application Angular'
                timeout(time: 15, unit: 'MINUTES') {
                  //  sh 'npm ci --omit=dev'
                  sh 'npm ci'
                    sh './node_modules/.bin/ng build --configuration=production'
                }
            }
        }

        stage('Afficher les fichiers g√©n√©r√©s') {
            steps {
                echo 'üìÇ Liste des fichiers g√©n√©r√©s dans dist/mabanque'
                sh '''
                    if [ -d dist/mabanque ]; then
                        ls -al dist/mabanque
                    else
                        echo "Le dossier dist/mabanque est introuvable"
                        exit 1
                    fi
                '''
            }
        }

        stage('Construire l\'image Docker') {
            steps {
                echo 'üê≥ Construction de l\'image Docker'
                sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
            }
        }

        stage('Authentification Docker') {
            steps {
                echo 'üîê Authentification Docker Hub'
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin'
                }
            }
        }

        stage('Push de l\'image Docker') {
            steps {
                echo 'üì§ Push de l\'image Docker'
                sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
            }
        }

        stage('Nettoyage') {
            steps {
                echo 'üßπ Suppression de l\'image Docker locale'
                sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true'
            }
        }
    }

    post {
        always {
            echo '‚úÖ Pipeline termin√©.'
        }
        failure {
            echo '‚ùå Une erreur est survenue pendant le pipeline.'
        }
    }
}
