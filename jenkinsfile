pipeline  {
    // spécifier que le pipeline peut 'executer sur n'importe quel agent
    agent any

    // declarer les variables d'environnement utilisés dans le pipeline
    environment {
        GIT_REPO = "https://github.com/greg6fr/mabanque.git"
        DOCKER_IMAGE = "96622564/mabanque"
        DOCKER_TAG = "latest"
        DOCKER_CREDENTIALS_ID = "docker-hub-credentials"
    }

    //définir les différentes étapes (stages) de notre pipeline
    stages {
        // Premiere etape :  Cloner notre le dépôt Github
        stage('Cloner le dépôt') {

            // definir les steps : les differentes commandes executer
            steps {
                echo "Clonage du dépot Github"
                git branch: 'main', url: "${GIT_REPO}" //Cloner la branche main

            }
        }

         // Deuxième etape :  Verification des dependances
         stage('Verification les versions de nodejs et npm') {
            steps {
                echo "Verifier les versions de nodejs et npm"
                sh """
                node -v
                npm -v

                """
            }
         }
        // Troisième etape :  Installer les dépendances de notre projet
        stage('Installer les dépendances Angular') {
            steps {
                echo 'Installation des dépendances de notre projet Angular'
                sh 'npm install'
            }
        }

        // Exécution des tests

        stage('Exécuter les tests') {
            steps {
                echo 'Exécution des tests unitaires Angular'
                sh 'npm run test -- --watch=false --browsers=ChromeHeadless'
            }
        }

        // Quatrième etape :  Construire l'application Angular
        stage('Construire l\'application') {
            steps {
                echo 'Construction de l\'application'
                sh 'npm run build --prod' // Compile et Construit l'application en mode production
            }
            }

        // Cinquième etape :  Afficher les fichiers générés après la construction
        stage('Afficher les fichiers générés') {
            steps {
                echo 'Liste de fichiers générés dans le dossier dist/mabanque'
                sh 'ls -al dist/mabanque'
            }
        }

        // Sixième etape :  Construire l'image Docker
        stage('Construire l\'image Docker') {
            steps {
                echo 'Construction de l\'image Docker'
                sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
            }
        }

        // Septième etape :  Authentification Docker
        stage('Authentification Docker') {
            steps {
                echo 'Authentification Docker'
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                   // sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin'
                }
            }
        }

        // Septième etape :  Push l'image Docker
        stage('Push l\'image Docker') {
            steps {
                echo 'Push de l\'image Docker'
                sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
            }
        }

        // Clean up
        stage('Clean up') {
            steps {
                echo 'Suppression de l\'image Docker'
                sh 'docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}'
            }
        }




     }
    // Actions à effectuer une fois le pipeline terminé

        post {
            always{
                echo 'Pipeline terminé.'
            }
        }

}
